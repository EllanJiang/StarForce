

using System;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Diagnostics.CodeAnalysis;

namespace Entt.Entities.Systems
{
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContext<TEntityKey, TContext>
    {
        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1> WithInputParameter<T1>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContextIn0Out1<TEntityKey, TContext, T1> WithOutputParameter<T1>()
        {
           return new EntitySystemBuilderWithContextIn0Out1<TEntityKey, TContext, T1>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2> WithInputParameter<T1, T2>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContextIn0Out2<TEntityKey, TContext, T1, T2> WithOutputParameter<T1, T2>()
        {
           return new EntitySystemBuilderWithContextIn0Out2<TEntityKey, TContext, T1, T2>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3> WithInputParameter<T1, T2, T3>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContextIn0Out3<TEntityKey, TContext, T1, T2, T3> WithOutputParameter<T1, T2, T3>()
        {
           return new EntitySystemBuilderWithContextIn0Out3<TEntityKey, TContext, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4> WithInputParameter<T1, T2, T3, T4>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContextIn0Out4<TEntityKey, TContext, T1, T2, T3, T4> WithOutputParameter<T1, T2, T3, T4>()
        {
           return new EntitySystemBuilderWithContextIn0Out4<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5> WithInputParameter<T1, T2, T3, T4, T5>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5> WithOutputParameter<T1, T2, T3, T4, T5>()
        {
           return new EntitySystemBuilderWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithInputParameter<T1, T2, T3, T4, T5, T6>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T1, T2, T3, T4, T5, T6>()
        {
           return new EntitySystemBuilderWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T1, T2, T3, T4, T5, T6, T7>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T1, T2, T3, T4, T5, T6, T7>()
        {
           return new EntitySystemBuilderWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }


    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn0Out1<TEntityKey, TContext, T1>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn0Out1(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn0Out1<TEntityKey, TContext, T1> action)
        {
            var view = reg.PersistentView<T1>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn1Out1<TEntityKey, TContext, T1, T2> WithInputParameter<T2>()
        {
           return new EntitySystemBuilderWithContextIn1Out1<TEntityKey, TContext, T1, T2>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn2Out1<TEntityKey, TContext, T1, T2, T3> WithInputParameter<T2,T3>()
        {
           return new EntitySystemBuilderWithContextIn2Out1<TEntityKey, TContext, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn3Out1<TEntityKey, TContext, T1, T2, T3, T4> WithInputParameter<T2,T3,T4>()
        {
           return new EntitySystemBuilderWithContextIn3Out1<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn4Out1<TEntityKey, TContext, T1, T2, T3, T4, T5> WithInputParameter<T2,T3,T4,T5>()
        {
           return new EntitySystemBuilderWithContextIn4Out1<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn5Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithInputParameter<T2,T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn5Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn6Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T2,T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn6Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out2<TEntityKey, TContext, T1, T2> WithOutputParameter<T2>()
        {
           return new EntitySystemBuilderWithContextIn0Out2<TEntityKey, TContext, T1, T2>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out3<TEntityKey, TContext, T1, T2, T3> WithOutputParameter<T2,T3>()
        {
           return new EntitySystemBuilderWithContextIn0Out3<TEntityKey, TContext, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out4<TEntityKey, TContext, T1, T2, T3, T4> WithOutputParameter<T2,T3,T4>()
        {
           return new EntitySystemBuilderWithContextIn0Out4<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5> WithOutputParameter<T2,T3,T4,T5>()
        {
           return new EntitySystemBuilderWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T2,T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T2,T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn0Out2<TEntityKey, TContext, T1, T2>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn0Out2(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn0Out2<TEntityKey, TContext, T1, T2> action)
        {
            var view = reg.PersistentView<T1, T2>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn1Out2<TEntityKey, TContext, T1, T2, T3> WithInputParameter<T3>()
        {
           return new EntitySystemBuilderWithContextIn1Out2<TEntityKey, TContext, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn2Out2<TEntityKey, TContext, T1, T2, T3, T4> WithInputParameter<T3,T4>()
        {
           return new EntitySystemBuilderWithContextIn2Out2<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn3Out2<TEntityKey, TContext, T1, T2, T3, T4, T5> WithInputParameter<T3,T4,T5>()
        {
           return new EntitySystemBuilderWithContextIn3Out2<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn4Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithInputParameter<T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn4Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn5Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn5Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out3<TEntityKey, TContext, T1, T2, T3> WithOutputParameter<T3>()
        {
           return new EntitySystemBuilderWithContextIn0Out3<TEntityKey, TContext, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out4<TEntityKey, TContext, T1, T2, T3, T4> WithOutputParameter<T3,T4>()
        {
           return new EntitySystemBuilderWithContextIn0Out4<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5> WithOutputParameter<T3,T4,T5>()
        {
           return new EntitySystemBuilderWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn0Out3<TEntityKey, TContext, T1, T2, T3>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn0Out3(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn0Out3<TEntityKey, TContext, T1, T2, T3> action)
        {
            var view = reg.PersistentView<T1, T2, T3>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn1Out3<TEntityKey, TContext, T1, T2, T3, T4> WithInputParameter<T4>()
        {
           return new EntitySystemBuilderWithContextIn1Out3<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn2Out3<TEntityKey, TContext, T1, T2, T3, T4, T5> WithInputParameter<T4,T5>()
        {
           return new EntitySystemBuilderWithContextIn2Out3<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn3Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithInputParameter<T4,T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn3Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn4Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn4Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out4<TEntityKey, TContext, T1, T2, T3, T4> WithOutputParameter<T4>()
        {
           return new EntitySystemBuilderWithContextIn0Out4<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5> WithOutputParameter<T4,T5>()
        {
           return new EntitySystemBuilderWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T4,T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn0Out4<TEntityKey, TContext, T1, T2, T3, T4>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn0Out4(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn0Out4<TEntityKey, TContext, T1, T2, T3, T4> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5> WithInputParameter<T5>()
        {
           return new EntitySystemBuilderWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithInputParameter<T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5> WithOutputParameter<T5>()
        {
           return new EntitySystemBuilderWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn0Out5(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithInputParameter<T6>()
        {
           return new EntitySystemBuilderWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T6>()
        {
           return new EntitySystemBuilderWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn0Out6(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T7>()
        {
           return new EntitySystemBuilderWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T7>()
        {
           return new EntitySystemBuilderWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn0Out7(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContext<TEntityKey, TContext, T1>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContext(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1> action)
        {
            var view = reg.PersistentView<T1>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2> WithInputParameter<T2>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3> WithInputParameter<T2,T3>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4> WithInputParameter<T2,T3,T4>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5> WithInputParameter<T2,T3,T4,T5>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithInputParameter<T2,T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T2,T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContextIn1Out1<TEntityKey, TContext, T1, T2> WithOutputParameter<T2>()
        {
           return new EntitySystemBuilderWithContextIn1Out1<TEntityKey, TContext, T1, T2>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn1Out2<TEntityKey, TContext, T1, T2, T3> WithOutputParameter<T2,T3>()
        {
           return new EntitySystemBuilderWithContextIn1Out2<TEntityKey, TContext, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn1Out3<TEntityKey, TContext, T1, T2, T3, T4> WithOutputParameter<T2,T3,T4>()
        {
           return new EntitySystemBuilderWithContextIn1Out3<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5> WithOutputParameter<T2,T3,T4,T5>()
        {
           return new EntitySystemBuilderWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T2,T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T2,T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn1Out1<TEntityKey, TContext, T1, T2>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn1Out1(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn1Out1<TEntityKey, TContext, T1, T2> action)
        {
            var view = reg.PersistentView<T1, T2>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn1Out2<TEntityKey, TContext, T1, T2, T3> WithOutputParameter<T3>()
        {
           return new EntitySystemBuilderWithContextIn1Out2<TEntityKey, TContext, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn1Out3<TEntityKey, TContext, T1, T2, T3, T4> WithOutputParameter<T3,T4>()
        {
           return new EntitySystemBuilderWithContextIn1Out3<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5> WithOutputParameter<T3,T4,T5>()
        {
           return new EntitySystemBuilderWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn1Out2<TEntityKey, TContext, T1, T2, T3>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn1Out2(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn1Out2<TEntityKey, TContext, T1, T2, T3> action)
        {
            var view = reg.PersistentView<T1, T2, T3>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn1Out3<TEntityKey, TContext, T1, T2, T3, T4> WithOutputParameter<T4>()
        {
           return new EntitySystemBuilderWithContextIn1Out3<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5> WithOutputParameter<T4,T5>()
        {
           return new EntitySystemBuilderWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T4,T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn1Out3<TEntityKey, TContext, T1, T2, T3, T4>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn1Out3(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn1Out3<TEntityKey, TContext, T1, T2, T3, T4> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5> WithOutputParameter<T5>()
        {
           return new EntitySystemBuilderWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn1Out4(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T6>()
        {
           return new EntitySystemBuilderWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn1Out5(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T7>()
        {
           return new EntitySystemBuilderWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn1Out6(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }


    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContext(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2> action)
        {
            var view = reg.PersistentView<T1, T2>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3> WithInputParameter<T3>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4> WithInputParameter<T3,T4>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5> WithInputParameter<T3,T4,T5>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithInputParameter<T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContextIn2Out1<TEntityKey, TContext, T1, T2, T3> WithOutputParameter<T3>()
        {
           return new EntitySystemBuilderWithContextIn2Out1<TEntityKey, TContext, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn2Out2<TEntityKey, TContext, T1, T2, T3, T4> WithOutputParameter<T3,T4>()
        {
           return new EntitySystemBuilderWithContextIn2Out2<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn2Out3<TEntityKey, TContext, T1, T2, T3, T4, T5> WithOutputParameter<T3,T4,T5>()
        {
           return new EntitySystemBuilderWithContextIn2Out3<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn2Out1<TEntityKey, TContext, T1, T2, T3>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn2Out1(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn2Out1<TEntityKey, TContext, T1, T2, T3> action)
        {
            var view = reg.PersistentView<T1, T2, T3>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn2Out2<TEntityKey, TContext, T1, T2, T3, T4> WithOutputParameter<T4>()
        {
           return new EntitySystemBuilderWithContextIn2Out2<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn2Out3<TEntityKey, TContext, T1, T2, T3, T4, T5> WithOutputParameter<T4,T5>()
        {
           return new EntitySystemBuilderWithContextIn2Out3<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T4,T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn2Out2<TEntityKey, TContext, T1, T2, T3, T4>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn2Out2(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn2Out2<TEntityKey, TContext, T1, T2, T3, T4> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn2Out3<TEntityKey, TContext, T1, T2, T3, T4, T5> WithOutputParameter<T5>()
        {
           return new EntitySystemBuilderWithContextIn2Out3<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn2Out3<TEntityKey, TContext, T1, T2, T3, T4, T5>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn2Out3(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn2Out3<TEntityKey, TContext, T1, T2, T3, T4, T5> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T6>()
        {
           return new EntitySystemBuilderWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn2Out4(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T7>()
        {
           return new EntitySystemBuilderWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn2Out5(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }


    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContext(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3> action)
        {
            var view = reg.PersistentView<T1, T2, T3>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4> WithInputParameter<T4>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5> WithInputParameter<T4,T5>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithInputParameter<T4,T5,T6>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContextIn3Out1<TEntityKey, TContext, T1, T2, T3, T4> WithOutputParameter<T4>()
        {
           return new EntitySystemBuilderWithContextIn3Out1<TEntityKey, TContext, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn3Out2<TEntityKey, TContext, T1, T2, T3, T4, T5> WithOutputParameter<T4,T5>()
        {
           return new EntitySystemBuilderWithContextIn3Out2<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn3Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T4,T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn3Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn3Out1<TEntityKey, TContext, T1, T2, T3, T4>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn3Out1(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn3Out1<TEntityKey, TContext, T1, T2, T3, T4> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn3Out2<TEntityKey, TContext, T1, T2, T3, T4, T5> WithOutputParameter<T5>()
        {
           return new EntitySystemBuilderWithContextIn3Out2<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn3Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn3Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn3Out2<TEntityKey, TContext, T1, T2, T3, T4, T5>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn3Out2(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn3Out2<TEntityKey, TContext, T1, T2, T3, T4, T5> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn3Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T6>()
        {
           return new EntitySystemBuilderWithContextIn3Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn3Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn3Out3(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn3Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T7>()
        {
           return new EntitySystemBuilderWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn3Out4(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }


    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContext(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5> WithInputParameter<T5>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithInputParameter<T5,T6>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContextIn4Out1<TEntityKey, TContext, T1, T2, T3, T4, T5> WithOutputParameter<T5>()
        {
           return new EntitySystemBuilderWithContextIn4Out1<TEntityKey, TContext, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn4Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T5,T6>()
        {
           return new EntitySystemBuilderWithContextIn4Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn4Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T5,T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn4Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn4Out1<TEntityKey, TContext, T1, T2, T3, T4, T5>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn4Out1(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn4Out1<TEntityKey, TContext, T1, T2, T3, T4, T5> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn4Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T6>()
        {
           return new EntitySystemBuilderWithContextIn4Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn4Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn4Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn4Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn4Out2(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn4Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn4Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T7>()
        {
           return new EntitySystemBuilderWithContextIn4Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn4Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn4Out3(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn4Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }


    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContext(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithInputParameter<T6>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContextIn5Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> WithOutputParameter<T6>()
        {
           return new EntitySystemBuilderWithContextIn5Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithContextIn5Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithContextIn5Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn5Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn5Out1(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn5Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContextIn5Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T7>()
        {
           return new EntitySystemBuilderWithContextIn5Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn5Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn5Out2(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn5Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }


    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContext(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

        public EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T7>()
        {
           return new EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

        public EntitySystemBuilderWithContextIn6Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T7>()
        {
           return new EntitySystemBuilderWithContextIn6Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContextIn6Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContextIn6Out1(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContextIn6Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }


    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithContext(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference<TContext> CreateSystem(ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act(TContext context)
            {
                view.ApplyWithContext(context, action);
            }

            return EntitySystemReference.Create<TContext>(Act, action);
        }

    }


}