<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ include file="../../T4Includes/GeneratorHelpers.ttinclude" #>
using System;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Diagnostics.CodeAnalysis;

namespace Entt.Entities.Systems
{
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContext<TEntityKey>
    {
<#
    foreach (var p in ProduceParameterVariants())
    {
        var templateParamsLight = p.ToDeclaration();
        var outQualifier = p.ToOutputSet().ToQualifier();
        var inQualifier = p.ToInputSet().ToQualifier();

#>
        public EntitySystemBuilderWithoutContext<#=inQualifier #><TEntityKey, <#=templateParamsLight #>> WithInputParameter<<#=templateParamsLight #>>()
        {
           return new EntitySystemBuilderWithoutContext<#=inQualifier #><TEntityKey, <#=templateParamsLight #>>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<#=outQualifier #><TEntityKey, <#=templateParamsLight #>> WithOutputParameter<<#=templateParamsLight #>>()
        {
           return new EntitySystemBuilderWithoutContext<#=outQualifier #><TEntityKey, <#=templateParamsLight #>>(reg, allowParallel);
        }
<#
    }
#>

    }


<#
    foreach (var p in ProduceParameterVariants())
    {
        var templateParamsLight = p.ToDeclaration();
        var x = p.ToOutputSet();
        var inQualifier = p.ToOutputSet().ToQualifier();
#>
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContext<#=inQualifier #><TEntityKey, <#=templateParamsLight #>>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContext<#=inQualifier #>(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.Apply<#=inQualifier #><TEntityKey, <#= templateParamsLight #>> action)
        {
            var view = reg.PersistentView<<#= templateParamsLight #>>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

<#
        foreach (var s in x.ProduceRemainingInputs())
        {
            var resultParameters = s.ToDeclaration();
            var deltaParameters = s.ToPartialDeclaration(x);
            var qualifier = s.ToQualifier();
#>
        public EntitySystemBuilderWithoutContext<#=qualifier #><TEntityKey, <#=resultParameters #>> WithInputParameter<<#=deltaParameters #>>()
        {
           return new EntitySystemBuilderWithoutContext<#=qualifier #><TEntityKey, <#=resultParameters #>>(reg, allowParallel);
        }
<#
        }
#>
<#
        foreach (var s in x.ProduceRemainingOutputs())
        {
            var resultParameters = s.ToDeclaration();
            var deltaParameters = s.ToPartialDeclaration(x);
            var qualifier = s.ToQualifier();
#>
        public EntitySystemBuilderWithoutContext<#=qualifier #><TEntityKey, <#=resultParameters #>> WithOutputParameter<<#=deltaParameters #>>()
        {
           return new EntitySystemBuilderWithoutContext<#=qualifier #><TEntityKey, <#=resultParameters #>>(reg, allowParallel);
        }
<#
        }
#>
    }
<#
    }
#>

<#
    foreach (var p in ProduceParameterVariants())
    {
        var templateParamsLight = p.ToDeclaration();
        var x = p.ToInputSet();
        var inQualifier = p.ToInputSet().ToQualifier();
#>
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContext<#=inQualifier #><TEntityKey, <#=templateParamsLight #>>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContext<#=inQualifier #>(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.Apply<#=inQualifier #><TEntityKey, <#= templateParamsLight #>> action)
        {
            var view = reg.PersistentView<<#= templateParamsLight #>>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

<#
        foreach (var s in x.ProduceRemainingInputs())
        {
            var resultParameters = s.ToDeclaration();
            var deltaParameters = s.ToPartialDeclaration(x);
            var qualifier = s.ToQualifier();
#>
        public EntitySystemBuilderWithoutContext<#=qualifier #><TEntityKey, <#=resultParameters #>> WithInputParameter<<#=deltaParameters #>>()
        {
           return new EntitySystemBuilderWithoutContext<#=qualifier #><TEntityKey, <#=resultParameters #>>(reg, allowParallel);
        }

<#
        }
#>
<#
        foreach (var s in x.ProduceRemainingOutputs())
        {
            var resultParameters = s.ToDeclaration();
            var deltaParameters = s.ToPartialDeclaration(x);
            var qualifier = s.ToQualifier();
#>
        public EntitySystemBuilderWithoutContext<#=qualifier #><TEntityKey, <#=resultParameters #>> WithOutputParameter<<#=deltaParameters #>>()
        {
           return new EntitySystemBuilderWithoutContext<#=qualifier #><TEntityKey, <#=resultParameters #>>(reg, allowParallel);
        }
<#
        }
#>
    }
<#

        foreach (var o in x.ProduceRemainingOutputs())
        {
            var qualifier = o.ToQualifier();
            var templateParam = o.ToDeclaration();
#>
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContext<#=qualifier #><TEntityKey, <#=templateParam #>>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContext<#=qualifier #>(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.Apply<#=qualifier #><TEntityKey, <#= templateParam #>> action)
        {
            var view = reg.PersistentView<<#= templateParam #>>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

<#
            foreach (var s in o.ProduceRemainingOutputs())
            {
                var resultParameters = s.ToDeclaration();
                var deltaParameters = s.ToPartialDeclaration(o);
                var outQualifier = s.ToQualifier();
#>
        public EntitySystemBuilderWithoutContext<#=outQualifier #><TEntityKey, <#=resultParameters #>> WithOutputParameter<<#=deltaParameters #>>()
        {
           return new EntitySystemBuilderWithoutContext<#=outQualifier #><TEntityKey, <#=resultParameters #>>(reg, allowParallel);
        }
<#
            }
#>

    }

<#
        }
    }
#>
}