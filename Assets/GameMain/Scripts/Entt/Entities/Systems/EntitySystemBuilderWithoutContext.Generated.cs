

using System;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Diagnostics.CodeAnalysis;

namespace Entt.Entities.Systems
{
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContext<TEntityKey>
    {
        public EntitySystemBuilderWithoutContext<TEntityKey, T1> WithInputParameter<T1>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContextIn0Out1<TEntityKey, T1> WithOutputParameter<T1>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out1<TEntityKey, T1>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2> WithInputParameter<T1, T2>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContextIn0Out2<TEntityKey, T1, T2> WithOutputParameter<T1, T2>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out2<TEntityKey, T1, T2>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3> WithInputParameter<T1, T2, T3>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContextIn0Out3<TEntityKey, T1, T2, T3> WithOutputParameter<T1, T2, T3>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out3<TEntityKey, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4> WithInputParameter<T1, T2, T3, T4>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContextIn0Out4<TEntityKey, T1, T2, T3, T4> WithOutputParameter<T1, T2, T3, T4>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out4<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5> WithInputParameter<T1, T2, T3, T4, T5>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContextIn0Out5<TEntityKey, T1, T2, T3, T4, T5> WithOutputParameter<T1, T2, T3, T4, T5>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out5<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6> WithInputParameter<T1, T2, T3, T4, T5, T6>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContextIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T1, T2, T3, T4, T5, T6>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T1, T2, T3, T4, T5, T6, T7>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContextIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T1, T2, T3, T4, T5, T6, T7>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }


    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn0Out1<TEntityKey, T1>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn0Out1(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn0Out1<TEntityKey, T1> action)
        {
            var view = reg.PersistentView<T1>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn1Out1<TEntityKey, T1, T2> WithInputParameter<T2>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out1<TEntityKey, T1, T2>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn2Out1<TEntityKey, T1, T2, T3> WithInputParameter<T2,T3>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out1<TEntityKey, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn3Out1<TEntityKey, T1, T2, T3, T4> WithInputParameter<T2,T3,T4>()
        {
           return new EntitySystemBuilderWithoutContextIn3Out1<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn4Out1<TEntityKey, T1, T2, T3, T4, T5> WithInputParameter<T2,T3,T4,T5>()
        {
           return new EntitySystemBuilderWithoutContextIn4Out1<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn5Out1<TEntityKey, T1, T2, T3, T4, T5, T6> WithInputParameter<T2,T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn5Out1<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn6Out1<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T2,T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn6Out1<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out2<TEntityKey, T1, T2> WithOutputParameter<T2>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out2<TEntityKey, T1, T2>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out3<TEntityKey, T1, T2, T3> WithOutputParameter<T2,T3>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out3<TEntityKey, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out4<TEntityKey, T1, T2, T3, T4> WithOutputParameter<T2,T3,T4>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out4<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out5<TEntityKey, T1, T2, T3, T4, T5> WithOutputParameter<T2,T3,T4,T5>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out5<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T2,T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T2,T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn0Out2<TEntityKey, T1, T2>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn0Out2(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn0Out2<TEntityKey, T1, T2> action)
        {
            var view = reg.PersistentView<T1, T2>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn1Out2<TEntityKey, T1, T2, T3> WithInputParameter<T3>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out2<TEntityKey, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn2Out2<TEntityKey, T1, T2, T3, T4> WithInputParameter<T3,T4>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out2<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn3Out2<TEntityKey, T1, T2, T3, T4, T5> WithInputParameter<T3,T4,T5>()
        {
           return new EntitySystemBuilderWithoutContextIn3Out2<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn4Out2<TEntityKey, T1, T2, T3, T4, T5, T6> WithInputParameter<T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn4Out2<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn5Out2<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn5Out2<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out3<TEntityKey, T1, T2, T3> WithOutputParameter<T3>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out3<TEntityKey, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out4<TEntityKey, T1, T2, T3, T4> WithOutputParameter<T3,T4>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out4<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out5<TEntityKey, T1, T2, T3, T4, T5> WithOutputParameter<T3,T4,T5>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out5<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn0Out3<TEntityKey, T1, T2, T3>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn0Out3(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn0Out3<TEntityKey, T1, T2, T3> action)
        {
            var view = reg.PersistentView<T1, T2, T3>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn1Out3<TEntityKey, T1, T2, T3, T4> WithInputParameter<T4>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out3<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn2Out3<TEntityKey, T1, T2, T3, T4, T5> WithInputParameter<T4,T5>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out3<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn3Out3<TEntityKey, T1, T2, T3, T4, T5, T6> WithInputParameter<T4,T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn3Out3<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn4Out3<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn4Out3<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out4<TEntityKey, T1, T2, T3, T4> WithOutputParameter<T4>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out4<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out5<TEntityKey, T1, T2, T3, T4, T5> WithOutputParameter<T4,T5>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out5<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T4,T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn0Out4<TEntityKey, T1, T2, T3, T4>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn0Out4(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn0Out4<TEntityKey, T1, T2, T3, T4> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn1Out4<TEntityKey, T1, T2, T3, T4, T5> WithInputParameter<T5>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out4<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6> WithInputParameter<T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out5<TEntityKey, T1, T2, T3, T4, T5> WithOutputParameter<T5>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out5<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn0Out5<TEntityKey, T1, T2, T3, T4, T5>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn0Out5(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn0Out5<TEntityKey, T1, T2, T3, T4, T5> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6> WithInputParameter<T6>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T6>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn0Out6(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T7>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T7>()
        {
           return new EntitySystemBuilderWithoutContextIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn0Out7(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContext<TEntityKey, T1>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContext(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.Apply<TEntityKey, T1> action)
        {
            var view = reg.PersistentView<T1>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2> WithInputParameter<T2>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3> WithInputParameter<T2,T3>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4> WithInputParameter<T2,T3,T4>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5> WithInputParameter<T2,T3,T4,T5>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6> WithInputParameter<T2,T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T2,T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContextIn1Out1<TEntityKey, T1, T2> WithOutputParameter<T2>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out1<TEntityKey, T1, T2>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn1Out2<TEntityKey, T1, T2, T3> WithOutputParameter<T2,T3>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out2<TEntityKey, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn1Out3<TEntityKey, T1, T2, T3, T4> WithOutputParameter<T2,T3,T4>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out3<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn1Out4<TEntityKey, T1, T2, T3, T4, T5> WithOutputParameter<T2,T3,T4,T5>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out4<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T2,T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T2,T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn1Out1<TEntityKey, T1, T2>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn1Out1(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn1Out1<TEntityKey, T1, T2> action)
        {
            var view = reg.PersistentView<T1, T2>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn1Out2<TEntityKey, T1, T2, T3> WithOutputParameter<T3>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out2<TEntityKey, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn1Out3<TEntityKey, T1, T2, T3, T4> WithOutputParameter<T3,T4>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out3<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn1Out4<TEntityKey, T1, T2, T3, T4, T5> WithOutputParameter<T3,T4,T5>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out4<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn1Out2<TEntityKey, T1, T2, T3>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn1Out2(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn1Out2<TEntityKey, T1, T2, T3> action)
        {
            var view = reg.PersistentView<T1, T2, T3>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn1Out3<TEntityKey, T1, T2, T3, T4> WithOutputParameter<T4>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out3<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn1Out4<TEntityKey, T1, T2, T3, T4, T5> WithOutputParameter<T4,T5>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out4<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T4,T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn1Out3<TEntityKey, T1, T2, T3, T4>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn1Out3(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn1Out3<TEntityKey, T1, T2, T3, T4> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn1Out4<TEntityKey, T1, T2, T3, T4, T5> WithOutputParameter<T5>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out4<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn1Out4<TEntityKey, T1, T2, T3, T4, T5>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn1Out4(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn1Out4<TEntityKey, T1, T2, T3, T4, T5> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T6>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn1Out5(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T7>()
        {
           return new EntitySystemBuilderWithoutContextIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn1Out6(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }


    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContext<TEntityKey, T1, T2>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContext(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.Apply<TEntityKey, T1, T2> action)
        {
            var view = reg.PersistentView<T1, T2>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3> WithInputParameter<T3>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4> WithInputParameter<T3,T4>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5> WithInputParameter<T3,T4,T5>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6> WithInputParameter<T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContextIn2Out1<TEntityKey, T1, T2, T3> WithOutputParameter<T3>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out1<TEntityKey, T1, T2, T3>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn2Out2<TEntityKey, T1, T2, T3, T4> WithOutputParameter<T3,T4>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out2<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn2Out3<TEntityKey, T1, T2, T3, T4, T5> WithOutputParameter<T3,T4,T5>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out3<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T3,T4,T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T3,T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn2Out1<TEntityKey, T1, T2, T3>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn2Out1(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn2Out1<TEntityKey, T1, T2, T3> action)
        {
            var view = reg.PersistentView<T1, T2, T3>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn2Out2<TEntityKey, T1, T2, T3, T4> WithOutputParameter<T4>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out2<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn2Out3<TEntityKey, T1, T2, T3, T4, T5> WithOutputParameter<T4,T5>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out3<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T4,T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn2Out2<TEntityKey, T1, T2, T3, T4>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn2Out2(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn2Out2<TEntityKey, T1, T2, T3, T4> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn2Out3<TEntityKey, T1, T2, T3, T4, T5> WithOutputParameter<T5>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out3<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn2Out3<TEntityKey, T1, T2, T3, T4, T5>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn2Out3(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn2Out3<TEntityKey, T1, T2, T3, T4, T5> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T6>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn2Out4(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T7>()
        {
           return new EntitySystemBuilderWithoutContextIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn2Out5(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }


    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContext(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.Apply<TEntityKey, T1, T2, T3> action)
        {
            var view = reg.PersistentView<T1, T2, T3>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4> WithInputParameter<T4>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5> WithInputParameter<T4,T5>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6> WithInputParameter<T4,T5,T6>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContextIn3Out1<TEntityKey, T1, T2, T3, T4> WithOutputParameter<T4>()
        {
           return new EntitySystemBuilderWithoutContextIn3Out1<TEntityKey, T1, T2, T3, T4>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn3Out2<TEntityKey, T1, T2, T3, T4, T5> WithOutputParameter<T4,T5>()
        {
           return new EntitySystemBuilderWithoutContextIn3Out2<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn3Out3<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T4,T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn3Out3<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T4,T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn3Out1<TEntityKey, T1, T2, T3, T4>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn3Out1(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn3Out1<TEntityKey, T1, T2, T3, T4> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn3Out2<TEntityKey, T1, T2, T3, T4, T5> WithOutputParameter<T5>()
        {
           return new EntitySystemBuilderWithoutContextIn3Out2<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn3Out3<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn3Out3<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn3Out2<TEntityKey, T1, T2, T3, T4, T5>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn3Out2(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn3Out2<TEntityKey, T1, T2, T3, T4, T5> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn3Out3<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T6>()
        {
           return new EntitySystemBuilderWithoutContextIn3Out3<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn3Out3<TEntityKey, T1, T2, T3, T4, T5, T6>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn3Out3(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn3Out3<TEntityKey, T1, T2, T3, T4, T5, T6> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T7>()
        {
           return new EntitySystemBuilderWithoutContextIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn3Out4(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }


    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContext(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5> WithInputParameter<T5>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6> WithInputParameter<T5,T6>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContextIn4Out1<TEntityKey, T1, T2, T3, T4, T5> WithOutputParameter<T5>()
        {
           return new EntitySystemBuilderWithoutContextIn4Out1<TEntityKey, T1, T2, T3, T4, T5>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn4Out2<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T5,T6>()
        {
           return new EntitySystemBuilderWithoutContextIn4Out2<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn4Out3<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T5,T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn4Out3<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn4Out1<TEntityKey, T1, T2, T3, T4, T5>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn4Out1(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn4Out1<TEntityKey, T1, T2, T3, T4, T5> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn4Out2<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T6>()
        {
           return new EntitySystemBuilderWithoutContextIn4Out2<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn4Out3<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn4Out3<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn4Out2<TEntityKey, T1, T2, T3, T4, T5, T6>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn4Out2(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn4Out2<TEntityKey, T1, T2, T3, T4, T5, T6> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn4Out3<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T7>()
        {
           return new EntitySystemBuilderWithoutContextIn4Out3<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn4Out3<TEntityKey, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn4Out3(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn4Out3<TEntityKey, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }


    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContext(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6> WithInputParameter<T6>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContextIn5Out1<TEntityKey, T1, T2, T3, T4, T5, T6> WithOutputParameter<T6>()
        {
           return new EntitySystemBuilderWithoutContextIn5Out1<TEntityKey, T1, T2, T3, T4, T5, T6>(reg, allowParallel);
        }
        public EntitySystemBuilderWithoutContextIn5Out2<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T6,T7>()
        {
           return new EntitySystemBuilderWithoutContextIn5Out2<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn5Out1<TEntityKey, T1, T2, T3, T4, T5, T6>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn5Out1(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn5Out1<TEntityKey, T1, T2, T3, T4, T5, T6> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContextIn5Out2<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T7>()
        {
           return new EntitySystemBuilderWithoutContextIn5Out2<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn5Out2<TEntityKey, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn5Out2(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn5Out2<TEntityKey, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }


    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContext(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5, T6> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

        public EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithInputParameter<T7>()
        {
           return new EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }

        public EntitySystemBuilderWithoutContextIn6Out1<TEntityKey, T1, T2, T3, T4, T5, T6, T7> WithOutputParameter<T7>()
        {
           return new EntitySystemBuilderWithoutContextIn6Out1<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(reg, allowParallel);
        }
    }
    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContextIn6Out1<TEntityKey, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContextIn6Out1(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }


        public EntitySystemReference CreateSystem(ViewDelegates.ApplyIn6Out1<TEntityKey, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }


    }

    [ExcludeFromCodeCoverage]
    public readonly partial struct EntitySystemBuilderWithoutContext<TEntityKey, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IEntityViewFactory<TEntityKey> reg;
        readonly bool allowParallel;

        public EntitySystemBuilderWithoutContext(IEntityViewFactory<TEntityKey> registry, bool allowParallelExecution)
        {
            this.allowParallel = allowParallelExecution;
            this.reg = registry;
        }

        public EntitySystemReference CreateSystem(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5, T6, T7> action)
        {
            var view = reg.PersistentView<T1, T2, T3, T4, T5, T6, T7>();
            view.AllowParallelExecution = allowParallel;

            void Act()
            {
                view.Apply(action);
            }

            return EntitySystemReference.Create(Act, action);
        }

    }
}