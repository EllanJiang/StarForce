


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Diagnostics.CodeAnalysis;

namespace Entt.Entities
{
    public partial class EntityRegistry<TEntityKey>
    {
        [ExcludeFromCodeCoverage]
        public IEntityView<TEntityKey, T1> View<T1>()
        {
            return new AdhocView<TEntityKey, T1>(this);
        }

        [ExcludeFromCodeCoverage]
        public IPersistentEntityView<TEntityKey, T1> PersistentView<T1>()
        {
            var type = typeof(PersistentView<TEntityKey, T1>);
            if (views.TryGetValue(type, out var view))
            {
                return (IPersistentEntityView<TEntityKey, T1>)view;
            }

            var v = new PersistentView<TEntityKey, T1>(this);
            views[type] = v;
            return v;
        }

        [ExcludeFromCodeCoverage]
        public IEntityView<TEntityKey, T1, T2> View<T1, T2>()
        {
            return new AdhocView<TEntityKey, T1, T2>(this);
        }

        [ExcludeFromCodeCoverage]
        public IPersistentEntityView<TEntityKey, T1, T2> PersistentView<T1, T2>()
        {
            var type = typeof(PersistentView<TEntityKey, T1, T2>);
            if (views.TryGetValue(type, out var view))
            {
                return (IPersistentEntityView<TEntityKey, T1, T2>)view;
            }

            var v = new PersistentView<TEntityKey, T1, T2>(this);
            views[type] = v;
            return v;
        }

        [ExcludeFromCodeCoverage]
        public IEntityView<TEntityKey, T1, T2, T3> View<T1, T2, T3>()
        {
            return new AdhocView<TEntityKey, T1, T2, T3>(this);
        }

        [ExcludeFromCodeCoverage]
        public IPersistentEntityView<TEntityKey, T1, T2, T3> PersistentView<T1, T2, T3>()
        {
            var type = typeof(PersistentView<TEntityKey, T1, T2, T3>);
            if (views.TryGetValue(type, out var view))
            {
                return (IPersistentEntityView<TEntityKey, T1, T2, T3>)view;
            }

            var v = new PersistentView<TEntityKey, T1, T2, T3>(this);
            views[type] = v;
            return v;
        }

        [ExcludeFromCodeCoverage]
        public IEntityView<TEntityKey, T1, T2, T3, T4> View<T1, T2, T3, T4>()
        {
            return new AdhocView<TEntityKey, T1, T2, T3, T4>(this);
        }

        [ExcludeFromCodeCoverage]
        public IPersistentEntityView<TEntityKey, T1, T2, T3, T4> PersistentView<T1, T2, T3, T4>()
        {
            var type = typeof(PersistentView<TEntityKey, T1, T2, T3, T4>);
            if (views.TryGetValue(type, out var view))
            {
                return (IPersistentEntityView<TEntityKey, T1, T2, T3, T4>)view;
            }

            var v = new PersistentView<TEntityKey, T1, T2, T3, T4>(this);
            views[type] = v;
            return v;
        }

        [ExcludeFromCodeCoverage]
        public IEntityView<TEntityKey, T1, T2, T3, T4, T5> View<T1, T2, T3, T4, T5>()
        {
            return new AdhocView<TEntityKey, T1, T2, T3, T4, T5>(this);
        }

        [ExcludeFromCodeCoverage]
        public IPersistentEntityView<TEntityKey, T1, T2, T3, T4, T5> PersistentView<T1, T2, T3, T4, T5>()
        {
            var type = typeof(PersistentView<TEntityKey, T1, T2, T3, T4, T5>);
            if (views.TryGetValue(type, out var view))
            {
                return (IPersistentEntityView<TEntityKey, T1, T2, T3, T4, T5>)view;
            }

            var v = new PersistentView<TEntityKey, T1, T2, T3, T4, T5>(this);
            views[type] = v;
            return v;
        }

        [ExcludeFromCodeCoverage]
        public IEntityView<TEntityKey, T1, T2, T3, T4, T5, T6> View<T1, T2, T3, T4, T5, T6>()
        {
            return new AdhocView<TEntityKey, T1, T2, T3, T4, T5, T6>(this);
        }

        [ExcludeFromCodeCoverage]
        public IPersistentEntityView<TEntityKey, T1, T2, T3, T4, T5, T6> PersistentView<T1, T2, T3, T4, T5, T6>()
        {
            var type = typeof(PersistentView<TEntityKey, T1, T2, T3, T4, T5, T6>);
            if (views.TryGetValue(type, out var view))
            {
                return (IPersistentEntityView<TEntityKey, T1, T2, T3, T4, T5, T6>)view;
            }

            var v = new PersistentView<TEntityKey, T1, T2, T3, T4, T5, T6>(this);
            views[type] = v;
            return v;
        }

        [ExcludeFromCodeCoverage]
        public IEntityView<TEntityKey, T1, T2, T3, T4, T5, T6, T7> View<T1, T2, T3, T4, T5, T6, T7>()
        {
            return new AdhocView<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(this);
        }

        [ExcludeFromCodeCoverage]
        public IPersistentEntityView<TEntityKey, T1, T2, T3, T4, T5, T6, T7> PersistentView<T1, T2, T3, T4, T5, T6, T7>()
        {
            var type = typeof(PersistentView<TEntityKey, T1, T2, T3, T4, T5, T6, T7>);
            if (views.TryGetValue(type, out var view))
            {
                return (IPersistentEntityView<TEntityKey, T1, T2, T3, T4, T5, T6, T7>)view;
            }

            var v = new PersistentView<TEntityKey, T1, T2, T3, T4, T5, T6, T7>(this);
            views[type] = v;
            return v;
        }


    }

}