

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Entt.Entities.Helpers;
using Entt.Entities.Pools;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

namespace Entt.Entities
{ 
    [ExcludeFromCodeCoverage] 
    public sealed class AdhocView<TEntityKey, T1, T2 > : AdhocMultiViewBase<TEntityKey>, IEntityView<TEntityKey, T1, T2>
        where TEntityKey : IEntityKey
    {
        readonly IPool<TEntityKey, T1> poolT1;
        readonly IPool<TEntityKey, T2> poolT2;

        public AdhocView(IEntityPoolAccess<TEntityKey> registry) :
            base(registry, 
                 registry.GetPool<T1>(),
                 registry.GetPool<T2>()
        )
        {
            poolT1 = registry.GetWritablePool<T1>();
            poolT2 = registry.GetWritablePool<T2>();
        }


        public void Apply(ViewDelegates.ApplyIn0Out2<TEntityKey, T1, T2 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn0Out2<TEntityKey, T1, T2 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn0Out2<TEntityKey, T1, T2> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn0Out2<TEntityKey, T1, T2 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;

            bulk(this, ek, ref r1, ref r2);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out2<TEntityKey, TContext, T1, T2> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out2<TEntityKey, TContext, T1, T2> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn0Out2<TEntityKey, TContext, T1, T2> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out2<TEntityKey, TContext, T1, T2> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;

            bulk(this, context, ek, ref r1, ref r2);
        }

        public void Apply(ViewDelegates.ApplyIn1Out1<TEntityKey, T1, T2 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn1Out1<TEntityKey, T1, T2 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn1Out1<TEntityKey, T1, T2> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn1Out1<TEntityKey, T1, T2 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;

            bulk(this, ek, in r1, ref r2);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out1<TEntityKey, TContext, T1, T2> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out1<TEntityKey, TContext, T1, T2> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn1Out1<TEntityKey, TContext, T1, T2> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out1<TEntityKey, TContext, T1, T2> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;

            bulk(this, context, ek, in r1, ref r2);
        }

        public void Apply(ViewDelegates.Apply<TEntityKey, T1, T2 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.Apply<TEntityKey, T1, T2 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.Apply<TEntityKey, T1, T2> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.Apply<TEntityKey, T1, T2 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;

            bulk(this, ek, in r1, in r2);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;

            bulk(this, context, ek, in r1, in r2);
        }

    }

    [ExcludeFromCodeCoverage] 
    public sealed class AdhocView<TEntityKey, T1, T2, T3 > : AdhocMultiViewBase<TEntityKey>, IEntityView<TEntityKey, T1, T2, T3>
        where TEntityKey : IEntityKey
    {
        readonly IPool<TEntityKey, T1> poolT1;
        readonly IPool<TEntityKey, T2> poolT2;
        readonly IPool<TEntityKey, T3> poolT3;

        public AdhocView(IEntityPoolAccess<TEntityKey> registry) :
            base(registry, 
                 registry.GetPool<T1>(),
                 registry.GetPool<T2>(),
                 registry.GetPool<T3>()
        )
        {
            poolT1 = registry.GetWritablePool<T1>();
            poolT2 = registry.GetWritablePool<T2>();
            poolT3 = registry.GetWritablePool<T3>();
        }


        public void Apply(ViewDelegates.ApplyIn0Out3<TEntityKey, T1, T2, T3 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn0Out3<TEntityKey, T1, T2, T3 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn0Out3<TEntityKey, T1, T2, T3> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn0Out3<TEntityKey, T1, T2, T3 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;

            bulk(this, ek, ref r1, ref r2, ref r3);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out3<TEntityKey, TContext, T1, T2, T3> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out3<TEntityKey, TContext, T1, T2, T3> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn0Out3<TEntityKey, TContext, T1, T2, T3> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out3<TEntityKey, TContext, T1, T2, T3> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;

            bulk(this, context, ek, ref r1, ref r2, ref r3);
        }

        public void Apply(ViewDelegates.ApplyIn1Out2<TEntityKey, T1, T2, T3 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn1Out2<TEntityKey, T1, T2, T3 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn1Out2<TEntityKey, T1, T2, T3> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn1Out2<TEntityKey, T1, T2, T3 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;

            bulk(this, ek, in r1, ref r2, ref r3);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out2<TEntityKey, TContext, T1, T2, T3> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out2<TEntityKey, TContext, T1, T2, T3> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn1Out2<TEntityKey, TContext, T1, T2, T3> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out2<TEntityKey, TContext, T1, T2, T3> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;

            bulk(this, context, ek, in r1, ref r2, ref r3);
        }

        public void Apply(ViewDelegates.ApplyIn2Out1<TEntityKey, T1, T2, T3 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn2Out1<TEntityKey, T1, T2, T3 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn2Out1<TEntityKey, T1, T2, T3> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn2Out1<TEntityKey, T1, T2, T3 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;

            bulk(this, ek, in r1, in r2, ref r3);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn2Out1<TEntityKey, TContext, T1, T2, T3> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn2Out1<TEntityKey, TContext, T1, T2, T3> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn2Out1<TEntityKey, TContext, T1, T2, T3> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn2Out1<TEntityKey, TContext, T1, T2, T3> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;

            bulk(this, context, ek, in r1, in r2, ref r3);
        }

        public void Apply(ViewDelegates.Apply<TEntityKey, T1, T2, T3 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.Apply<TEntityKey, T1, T2, T3 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.Apply<TEntityKey, T1, T2, T3> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.Apply<TEntityKey, T1, T2, T3 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;

            bulk(this, ek, in r1, in r2, in r3);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;

            bulk(this, context, ek, in r1, in r2, in r3);
        }

    }

    [ExcludeFromCodeCoverage] 
    public sealed class AdhocView<TEntityKey, T1, T2, T3, T4 > : AdhocMultiViewBase<TEntityKey>, IEntityView<TEntityKey, T1, T2, T3, T4>
        where TEntityKey : IEntityKey
    {
        readonly IPool<TEntityKey, T1> poolT1;
        readonly IPool<TEntityKey, T2> poolT2;
        readonly IPool<TEntityKey, T3> poolT3;
        readonly IPool<TEntityKey, T4> poolT4;

        public AdhocView(IEntityPoolAccess<TEntityKey> registry) :
            base(registry, 
                 registry.GetPool<T1>(),
                 registry.GetPool<T2>(),
                 registry.GetPool<T3>(),
                 registry.GetPool<T4>()
        )
        {
            poolT1 = registry.GetWritablePool<T1>();
            poolT2 = registry.GetWritablePool<T2>();
            poolT3 = registry.GetWritablePool<T3>();
            poolT4 = registry.GetWritablePool<T4>();
        }


        public void Apply(ViewDelegates.ApplyIn0Out4<TEntityKey, T1, T2, T3, T4 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn0Out4<TEntityKey, T1, T2, T3, T4 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn0Out4<TEntityKey, T1, T2, T3, T4> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn0Out4<TEntityKey, T1, T2, T3, T4 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;

            bulk(this, ek, ref r1, ref r2, ref r3, ref r4);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out4<TEntityKey, TContext, T1, T2, T3, T4> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out4<TEntityKey, TContext, T1, T2, T3, T4> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn0Out4<TEntityKey, TContext, T1, T2, T3, T4> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out4<TEntityKey, TContext, T1, T2, T3, T4> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;

            bulk(this, context, ek, ref r1, ref r2, ref r3, ref r4);
        }

        public void Apply(ViewDelegates.ApplyIn1Out3<TEntityKey, T1, T2, T3, T4 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn1Out3<TEntityKey, T1, T2, T3, T4 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn1Out3<TEntityKey, T1, T2, T3, T4> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn1Out3<TEntityKey, T1, T2, T3, T4 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;

            bulk(this, ek, in r1, ref r2, ref r3, ref r4);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out3<TEntityKey, TContext, T1, T2, T3, T4> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out3<TEntityKey, TContext, T1, T2, T3, T4> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn1Out3<TEntityKey, TContext, T1, T2, T3, T4> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out3<TEntityKey, TContext, T1, T2, T3, T4> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;

            bulk(this, context, ek, in r1, ref r2, ref r3, ref r4);
        }

        public void Apply(ViewDelegates.ApplyIn2Out2<TEntityKey, T1, T2, T3, T4 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn2Out2<TEntityKey, T1, T2, T3, T4 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn2Out2<TEntityKey, T1, T2, T3, T4> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn2Out2<TEntityKey, T1, T2, T3, T4 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;

            bulk(this, ek, in r1, in r2, ref r3, ref r4);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn2Out2<TEntityKey, TContext, T1, T2, T3, T4> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn2Out2<TEntityKey, TContext, T1, T2, T3, T4> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn2Out2<TEntityKey, TContext, T1, T2, T3, T4> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn2Out2<TEntityKey, TContext, T1, T2, T3, T4> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;

            bulk(this, context, ek, in r1, in r2, ref r3, ref r4);
        }

        public void Apply(ViewDelegates.ApplyIn3Out1<TEntityKey, T1, T2, T3, T4 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn3Out1<TEntityKey, T1, T2, T3, T4 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn3Out1<TEntityKey, T1, T2, T3, T4> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn3Out1<TEntityKey, T1, T2, T3, T4 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;

            bulk(this, ek, in r1, in r2, in r3, ref r4);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn3Out1<TEntityKey, TContext, T1, T2, T3, T4> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn3Out1<TEntityKey, TContext, T1, T2, T3, T4> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn3Out1<TEntityKey, TContext, T1, T2, T3, T4> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn3Out1<TEntityKey, TContext, T1, T2, T3, T4> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;

            bulk(this, context, ek, in r1, in r2, in r3, ref r4);
        }

        public void Apply(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;

            bulk(this, ek, in r1, in r2, in r3, in r4);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;

            bulk(this, context, ek, in r1, in r2, in r3, in r4);
        }

    }

    [ExcludeFromCodeCoverage] 
    public sealed class AdhocView<TEntityKey, T1, T2, T3, T4, T5 > : AdhocMultiViewBase<TEntityKey>, IEntityView<TEntityKey, T1, T2, T3, T4, T5>
        where TEntityKey : IEntityKey
    {
        readonly IPool<TEntityKey, T1> poolT1;
        readonly IPool<TEntityKey, T2> poolT2;
        readonly IPool<TEntityKey, T3> poolT3;
        readonly IPool<TEntityKey, T4> poolT4;
        readonly IPool<TEntityKey, T5> poolT5;

        public AdhocView(IEntityPoolAccess<TEntityKey> registry) :
            base(registry, 
                 registry.GetPool<T1>(),
                 registry.GetPool<T2>(),
                 registry.GetPool<T3>(),
                 registry.GetPool<T4>(),
                 registry.GetPool<T5>()
        )
        {
            poolT1 = registry.GetWritablePool<T1>();
            poolT2 = registry.GetWritablePool<T2>();
            poolT3 = registry.GetWritablePool<T3>();
            poolT4 = registry.GetWritablePool<T4>();
            poolT5 = registry.GetWritablePool<T5>();
        }


        public void Apply(ViewDelegates.ApplyIn0Out5<TEntityKey, T1, T2, T3, T4, T5 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn0Out5<TEntityKey, T1, T2, T3, T4, T5 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn0Out5<TEntityKey, T1, T2, T3, T4, T5> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn0Out5<TEntityKey, T1, T2, T3, T4, T5 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;

            bulk(this, ek, ref r1, ref r2, ref r3, ref r4, ref r5);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out5<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;

            bulk(this, context, ek, ref r1, ref r2, ref r3, ref r4, ref r5);
        }

        public void Apply(ViewDelegates.ApplyIn1Out4<TEntityKey, T1, T2, T3, T4, T5 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn1Out4<TEntityKey, T1, T2, T3, T4, T5 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn1Out4<TEntityKey, T1, T2, T3, T4, T5> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn1Out4<TEntityKey, T1, T2, T3, T4, T5 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;

            bulk(this, ek, in r1, ref r2, ref r3, ref r4, ref r5);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out4<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;

            bulk(this, context, ek, in r1, ref r2, ref r3, ref r4, ref r5);
        }

        public void Apply(ViewDelegates.ApplyIn2Out3<TEntityKey, T1, T2, T3, T4, T5 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn2Out3<TEntityKey, T1, T2, T3, T4, T5 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn2Out3<TEntityKey, T1, T2, T3, T4, T5> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn2Out3<TEntityKey, T1, T2, T3, T4, T5 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;

            bulk(this, ek, in r1, in r2, ref r3, ref r4, ref r5);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn2Out3<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn2Out3<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn2Out3<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn2Out3<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;

            bulk(this, context, ek, in r1, in r2, ref r3, ref r4, ref r5);
        }

        public void Apply(ViewDelegates.ApplyIn3Out2<TEntityKey, T1, T2, T3, T4, T5 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn3Out2<TEntityKey, T1, T2, T3, T4, T5 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn3Out2<TEntityKey, T1, T2, T3, T4, T5> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn3Out2<TEntityKey, T1, T2, T3, T4, T5 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;

            bulk(this, ek, in r1, in r2, in r3, ref r4, ref r5);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn3Out2<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn3Out2<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn3Out2<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn3Out2<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;

            bulk(this, context, ek, in r1, in r2, in r3, ref r4, ref r5);
        }

        public void Apply(ViewDelegates.ApplyIn4Out1<TEntityKey, T1, T2, T3, T4, T5 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn4Out1<TEntityKey, T1, T2, T3, T4, T5 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn4Out1<TEntityKey, T1, T2, T3, T4, T5> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn4Out1<TEntityKey, T1, T2, T3, T4, T5 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;

            bulk(this, ek, in r1, in r2, in r3, in r4, ref r5);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn4Out1<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn4Out1<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn4Out1<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn4Out1<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;

            bulk(this, context, ek, in r1, in r2, in r3, in r4, ref r5);
        }

        public void Apply(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;

            bulk(this, ek, in r1, in r2, in r3, in r4, in r5);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;

            bulk(this, context, ek, in r1, in r2, in r3, in r4, in r5);
        }

    }

    [ExcludeFromCodeCoverage] 
    public sealed class AdhocView<TEntityKey, T1, T2, T3, T4, T5, T6 > : AdhocMultiViewBase<TEntityKey>, IEntityView<TEntityKey, T1, T2, T3, T4, T5, T6>
        where TEntityKey : IEntityKey
    {
        readonly IPool<TEntityKey, T1> poolT1;
        readonly IPool<TEntityKey, T2> poolT2;
        readonly IPool<TEntityKey, T3> poolT3;
        readonly IPool<TEntityKey, T4> poolT4;
        readonly IPool<TEntityKey, T5> poolT5;
        readonly IPool<TEntityKey, T6> poolT6;

        public AdhocView(IEntityPoolAccess<TEntityKey> registry) :
            base(registry, 
                 registry.GetPool<T1>(),
                 registry.GetPool<T2>(),
                 registry.GetPool<T3>(),
                 registry.GetPool<T4>(),
                 registry.GetPool<T5>(),
                 registry.GetPool<T6>()
        )
        {
            poolT1 = registry.GetWritablePool<T1>();
            poolT2 = registry.GetWritablePool<T2>();
            poolT3 = registry.GetWritablePool<T3>();
            poolT4 = registry.GetWritablePool<T4>();
            poolT5 = registry.GetWritablePool<T5>();
            poolT6 = registry.GetWritablePool<T6>();
        }


        public void Apply(ViewDelegates.ApplyIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn0Out6<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;

            bulk(this, ek, ref r1, ref r2, ref r3, ref r4, ref r5, ref r6);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;

            bulk(this, context, ek, ref r1, ref r2, ref r3, ref r4, ref r5, ref r6);
        }

        public void Apply(ViewDelegates.ApplyIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn1Out5<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;

            bulk(this, ek, in r1, ref r2, ref r3, ref r4, ref r5, ref r6);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;

            bulk(this, context, ek, in r1, ref r2, ref r3, ref r4, ref r5, ref r6);
        }

        public void Apply(ViewDelegates.ApplyIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn2Out4<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;

            bulk(this, ek, in r1, in r2, ref r3, ref r4, ref r5, ref r6);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn2Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;

            bulk(this, context, ek, in r1, in r2, ref r3, ref r4, ref r5, ref r6);
        }

        public void Apply(ViewDelegates.ApplyIn3Out3<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn3Out3<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn3Out3<TEntityKey, T1, T2, T3, T4, T5, T6> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn3Out3<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;

            bulk(this, ek, in r1, in r2, in r3, ref r4, ref r5, ref r6);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn3Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn3Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn3Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn3Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;

            bulk(this, context, ek, in r1, in r2, in r3, ref r4, ref r5, ref r6);
        }

        public void Apply(ViewDelegates.ApplyIn4Out2<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn4Out2<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn4Out2<TEntityKey, T1, T2, T3, T4, T5, T6> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn4Out2<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;

            bulk(this, ek, in r1, in r2, in r3, in r4, ref r5, ref r6);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn4Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn4Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn4Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn4Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;

            bulk(this, context, ek, in r1, in r2, in r3, in r4, ref r5, ref r6);
        }

        public void Apply(ViewDelegates.ApplyIn5Out1<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn5Out1<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn5Out1<TEntityKey, T1, T2, T3, T4, T5, T6> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn5Out1<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;

            bulk(this, ek, in r1, in r2, in r3, in r4, in r5, ref r6);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn5Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn5Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn5Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn5Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;

            bulk(this, context, ek, in r1, in r2, in r3, in r4, in r5, ref r6);
        }

        public void Apply(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5, T6> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5, T6 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;

            bulk(this, ek, in r1, in r2, in r3, in r4, in r5, in r6);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;

            bulk(this, context, ek, in r1, in r2, in r3, in r4, in r5, in r6);
        }

    }

    [ExcludeFromCodeCoverage] 
    public sealed class AdhocView<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > : AdhocMultiViewBase<TEntityKey>, IEntityView<TEntityKey, T1, T2, T3, T4, T5, T6, T7>
        where TEntityKey : IEntityKey
    {
        readonly IPool<TEntityKey, T1> poolT1;
        readonly IPool<TEntityKey, T2> poolT2;
        readonly IPool<TEntityKey, T3> poolT3;
        readonly IPool<TEntityKey, T4> poolT4;
        readonly IPool<TEntityKey, T5> poolT5;
        readonly IPool<TEntityKey, T6> poolT6;
        readonly IPool<TEntityKey, T7> poolT7;

        public AdhocView(IEntityPoolAccess<TEntityKey> registry) :
            base(registry, 
                 registry.GetPool<T1>(),
                 registry.GetPool<T2>(),
                 registry.GetPool<T3>(),
                 registry.GetPool<T4>(),
                 registry.GetPool<T5>(),
                 registry.GetPool<T6>(),
                 registry.GetPool<T7>()
        )
        {
            poolT1 = registry.GetWritablePool<T1>();
            poolT2 = registry.GetWritablePool<T2>();
            poolT3 = registry.GetWritablePool<T3>();
            poolT4 = registry.GetWritablePool<T4>();
            poolT5 = registry.GetWritablePool<T5>();
            poolT6 = registry.GetWritablePool<T6>();
            poolT7 = registry.GetWritablePool<T7>();
        }


        public void Apply(ViewDelegates.ApplyIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn0Out7<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, ek, ref r1, ref r2, ref r3, ref r4, ref r5, ref r6, ref r7);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn0Out7<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, context, ek, ref r1, ref r2, ref r3, ref r4, ref r5, ref r6, ref r7);
        }

        public void Apply(ViewDelegates.ApplyIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn1Out6<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, ek, in r1, ref r2, ref r3, ref r4, ref r5, ref r6, ref r7);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn1Out6<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, context, ek, in r1, ref r2, ref r3, ref r4, ref r5, ref r6, ref r7);
        }

        public void Apply(ViewDelegates.ApplyIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn2Out5<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, ek, in r1, in r2, ref r3, ref r4, ref r5, ref r6, ref r7);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn2Out5<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, context, ek, in r1, in r2, ref r3, ref r4, ref r5, ref r6, ref r7);
        }

        public void Apply(ViewDelegates.ApplyIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn3Out4<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, ek, in r1, in r2, in r3, ref r4, ref r5, ref r6, ref r7);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn3Out4<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, context, ek, in r1, in r2, in r3, ref r4, ref r5, ref r6, ref r7);
        }

        public void Apply(ViewDelegates.ApplyIn4Out3<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn4Out3<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn4Out3<TEntityKey, T1, T2, T3, T4, T5, T6, T7> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn4Out3<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, ek, in r1, in r2, in r3, in r4, ref r5, ref r6, ref r7);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn4Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn4Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn4Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn4Out3<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, context, ek, in r1, in r2, in r3, in r4, ref r5, ref r6, ref r7);
        }

        public void Apply(ViewDelegates.ApplyIn5Out2<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn5Out2<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn5Out2<TEntityKey, T1, T2, T3, T4, T5, T6, T7> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn5Out2<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, ek, in r1, in r2, in r3, in r4, in r5, ref r6, ref r7);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn5Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn5Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn5Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn5Out2<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, context, ek, in r1, in r2, in r3, in r4, in r5, ref r6, ref r7);
        }

        public void Apply(ViewDelegates.ApplyIn6Out1<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.ApplyIn6Out1<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.ApplyIn6Out1<TEntityKey, T1, T2, T3, T4, T5, T6, T7> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.ApplyIn6Out1<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, ek, in r1, in r2, in r3, in r4, in r5, in r6, ref r7);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn6Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn6Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContextIn6Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContextIn6Out1<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, context, ek, in r1, in r2, in r3, in r4, in r5, in r6, ref r7);
        }

        public void Apply(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5, T6, T7> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.Apply<TEntityKey, T1, T2, T3, T4, T5, T6, T7 > bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, ek, in r1, in r2, in r3, in r4, in r5, in r6, in r7);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<TEntityKey, TContext, T1, T2, T3, T4, T5, T6, T7> bulk, TEntityKey ek)
        {
            // declare default values for each query
            T1 d1 = default;
            T2 d2 = default;
            T3 d3 = default;
            T4 d4 = default;
            T5 d5 = default;
            T6 d6 = default;
            T7 d7 = default;
            ref var r1 = ref poolT1.TryGetModifiableRef(ek, ref d1, out var s1); if (!s1) return;
            ref var r2 = ref poolT2.TryGetModifiableRef(ek, ref d2, out var s2); if (!s2) return;
            ref var r3 = ref poolT3.TryGetModifiableRef(ek, ref d3, out var s3); if (!s3) return;
            ref var r4 = ref poolT4.TryGetModifiableRef(ek, ref d4, out var s4); if (!s4) return;
            ref var r5 = ref poolT5.TryGetModifiableRef(ek, ref d5, out var s5); if (!s5) return;
            ref var r6 = ref poolT6.TryGetModifiableRef(ek, ref d6, out var s6); if (!s6) return;
            ref var r7 = ref poolT7.TryGetModifiableRef(ek, ref d7, out var s7); if (!s7) return;

            bulk(this, context, ek, in r1, in r2, in r3, in r4, in r5, in r6, in r7);
        }

    }

}