<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ include file="../T4Includes/GeneratorHelpers.ttinclude" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entt.Entities.Helpers;
using Entt.Entities.Pools;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

namespace Entt.Entities
{
<#
    foreach (var p in ProduceParameterVariants())
    {
        var templateParamsLight = p.ToDeclaration();
#>
    [ExcludeFromCodeCoverage] 
    public sealed class PersistentView<TEntityKey, <#= templateParamsLight #>> : PersistentMultiViewBase<TEntityKey>, IPersistentEntityView<TEntityKey, <#= templateParamsLight #>>
        where TEntityKey: IEntityKey
    {
        <#= p.ToCode("readonly IPool<TEntityKey, {1}> pool{1};", "\n        ") #>

        public PersistentView(IEntityPoolAccess<TEntityKey> registry) :
            base(registry, 
                 <#= p.ToCode("registry.GetPool<{1}>()", ",\n                 ") #>
        )
        {
            <#= p.ToCode("pool{1} = registry.GetWritablePool<{1}>();", "\n            ") #>
        }

<#
        foreach (var x in p.ProduceParameterConfig())
        {
            var qualifier = x.ToQualifier();
#>

        public void Apply(ViewDelegates.Apply<#=qualifier #><TEntityKey, <#= templateParamsLight #> > bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallel(bulk);
                return;  
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOne(bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallel(ViewDelegates.Apply<#=qualifier #><TEntityKey, <#= templateParamsLight #> > bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                PersistentViewParallelism.PartitionAndRunMany(p, b, ApplyMany);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyMany(RawList<TEntityKey> p, ViewDelegates.Apply<#=qualifier #><TEntityKey, <#= templateParamsLight #>> bulk, int fromInclusive, int toExclusive)
        {
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOne(bulk, data[i]);
            }
        }

        void ApplyOne(ViewDelegates.Apply<#=qualifier #><TEntityKey, <#= templateParamsLight #> > bulk, TEntityKey ek)
        {
            // declare default values for each query
            <#= x.ToCode("{1} d{0} = default;", "\n            ") #>
            <#= x.ToCode("ref var r{0} = ref pool{1}.TryGetModifiableRef(ek, ref d{0}, out var s{0}); if (!s{0}) return;", "\n            ") #>

            bulk(this, ek, <#= x.ToCode2("in r{0}", "ref r{0}", ", ") #>);
        }

        public void ApplyWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<#=qualifier #><TEntityKey, TContext, <#= templateParamsLight #>> bulk)
        {
            if (AllowParallelExecution)
            {
                ApplyParallelWithContext(context, bulk);
            }

            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                foreach (var ek in p)
                {
                    ApplyOneWithContext(context, bulk, ek);
                }
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyParallelWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<#=qualifier #><TEntityKey, TContext, <#= templateParamsLight #>> bulk)
        {
            var p = EntityKeyListPool<TEntityKey>.Reserve(this);
            try
            {
                var b = bulk;
                var c = context;
                PersistentViewParallelism.PartitionAndRunMany(p, (c, b), ApplyManyWithContext<TContext>);
            }
            finally
            {
                EntityKeyListPool<TEntityKey>.Release(p);
            }
        }

        void ApplyManyWithContext<TContext>(RawList<TEntityKey> p, 
                                            (TContext context, ViewDelegates.ApplyWithContext<#=qualifier #><TEntityKey, TContext, <#= templateParamsLight #>> bulk) b, 
                                            int fromInclusive, int toExclusive)
        {
            var (context, bulk) = b;
            var data = p.UnsafeData;
            for (int i = fromInclusive; i < toExclusive; i += 1)
            {
                ApplyOneWithContext(context, bulk, data[i]);
            }
        }

        void ApplyOneWithContext<TContext>(TContext context, ViewDelegates.ApplyWithContext<#=qualifier #><TEntityKey, TContext, <#= templateParamsLight #>> bulk, TEntityKey ek)
        {
            // declare default values for each query
            <#= x.ToCode("{1} d{0} = default;", "\n            ") #>
            <#= x.ToCode("ref var r{0} = ref pool{1}.TryGetModifiableRef(ek, ref d{0}, out var s{0}); if (!s{0}) return;", "\n            ") #>

            bulk(this, context, ek, <#= x.ToCode2("in r{0}", "ref r{0}", ", ") #>);
        }
<#
    }
#>

    }
<#
    }
#>
}